---
name: gitflow-build-and-deploy

on:
  push:
    branches:
      - 'develop'
      - 'hotfix/**'
      - 'feature/**'

jobs:
  sit-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: build
      run: echo "Build has been completed"
    - name: deployment
      run: echo "Deployment has been completed"
    - name: print env
      run: env

  create-release:
    runs-on: ubuntu-latest
    needs: sit-build-and-deploy
    if: (startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/feature/')) && (github.event_name == 'push' && github.actor == 'four-codes')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Release create
        run: |
          increment_version() {
            local RELEASE_ORDER="$1"
            local VERSION="$2"
            local SEGMENT="$3"

            IFS='.' read -r -a parts <<< "$VERSION"
            if [ "$SEGMENT" == "middle" ]; then
                ((parts[1]++))
            elif [ "$SEGMENT" == "last" ]; then
                ((parts[2]++))
            else
                echo "Invalid SEGMENT. Please use 'middle' or 'last'."
                exit 1
            fi

            NEW_VERSION="${RELEASE_ORDER}.${parts[1]}.${parts[2]}"
            echo "${NEW_VERSION}"
          }

          BRANCH_NAME=$(echo "${GITHUB_REF}" | awk -F'/' '{print $NF}')
          echo "BRANCH NAME is: ${BRANCH_NAME}"

          if [[ "${BRANCH_NAME}" == "develop" ]]; then
              VERSION_INCREMENT="middle"
          else
              VERSION_INCREMENT="last"
          fi
          LAST_RELEASE_BRANCH_NAME=$(curl -L -s -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${GIT_TOKEN}"   -H "X-GitHub-Api-Version: ${GIT_API_VERSION}"   "https://api.github.com/repos/${GITHUB_REPOSITORY}/branches" | jq -r '[.[] | select(.name | startswith("release/") and match("^release/([0-9]+\\.){2}[0-9]+$"))] | max_by(.name | split("/")[1] | split(".") | map(tonumber)) | .name | split("/")[1]')
          RELEASE_VERSION=$(increment_version "${RELEASE_ORDER}" "${LAST_RELEASE_BRANCH_NAME}" "${VERSION_INCREMENT}")
          echo "RELEASE VERSION is: ${RELEASE_VERSION}"
          NEW_BRANCH_NAME="release/${RELEASE_VERSION}"

          echo "NEW RELEASE VERSION is: ${NEW_BRANCH_NAME}"
          BASE_BRANCH="develop"
        env:
          RELEASE_ORDER: 1
          GIT_TOKEN: ${{ secrets.ORG_GIT_TOKEN }}
          GIT_API_VERSION: 2022-11-28

  uat-build-and-deploy:
    runs-on: ubuntu-latest
    needs: sit-build-and-deploy
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: build
      run: echo "user-acceptance-testing Build has been completed"
    - name: deployment
      run: echo "user-acceptance-testing deployment has been completed"

  prd-build-and-deploy:
    runs-on: ubuntu-latest
    needs: uat-build-and-deploy
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: build
      run: echo "production build has been completed"
    - name: deployment
      run: echo "Production deployment has been completed"